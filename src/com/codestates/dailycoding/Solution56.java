package com.codestates.dailycoding;

public class Solution56 {
    // 2022.12.1(목) 8h30 -> 총 1시간 고민한 내용 v1 = 나의 pseudo code대로 구현을 해보고 싶긴 한데, 시간 많이 들인 후 결국 잘못된 방향이었다면 어떡하지 하는 우려에, 더 해 볼지, 아니면 레퍼런스 보며 공부할지, 아직 잘 모르겠음 + 이럴 때 다른 사람들과 이야기하며 방향 확인/논의할 수 있으면 좋겠다..
    // 구글링 결과 백준 2580번 gold4 수준 backtracking 문제라고 함
    public int[][] sudoku(int[][] board) {
        /* 숫자 퍼즐 sudoku = 가/세로 9칸으로 이루어져 있는 표에 1부터 9까지의 숫자/자연수를 채워 넣음
		조건1) 가로, 세로에 1~9 1번씩만 등장
		조건2) 가/세로줄 3*3칸에 1~9 1번씩만 등장

		입력 = 일부 칸이 비어있는 상태(0이 입력되어 있음)인 스도쿠 보드
		리턴 = 스도쿠 퍼즐이 완성된 보드(unique/유일함)

		입력으로 주어지는 board를 직접 수정해도 상관없음

		ideation)
		1~9(또는 배열 인덱스 기준 0 ~ 8, i + 1)를 배열 같은 저장소에 세팅해두고 체크할 때 사용
		가로, 세로, 3*3칸에 1~9가 중복되지 않도록 체크해야 함

		종이에 입/출력 예시 첫번째(좌측 상단) 3*3칸까지 종이로 풀이 과정 써봄 -> 나의 질문 = i번째 3*3칸 검사 시 그 칸은 언제나 바로 풀이가 가능한가, 아니면 i+n번째 3*3칸 검사 시까지 기다려야 하는 경우도 있나?
		3*3칸 안에서도 가로 줄 먼저 검사할지, 아니면 세로 줄 먼저 검사할지, 로직 정해야 할 듯?

		첫번째 3*3칸(board[0][0] ~ board[2][2]) 채워나갈 때 3*3칸 내부 뿐만 아니라
		board[0][0]~board[8][2](첫번째 3개 세로줄 = board[0][0]~board[8][0] + board[0][1]~board[8][1] + board[0][2]~board[8][2]) 및
		board[0][0]~board[2][8](첫번째 3개 가로줄 = board[0][0]~board[0][8] + board[1][0]~board[1][8] + board[2][0]~board[2][8])도 검색

		그 다음 검사 대상/두번째 3*3칸 = board[0][3]~board[2][5]..
	    네번째 3*3칸 = board[3][0]~board[5][2]..
	    다섯번째 3*3칸 = board[3][3]~board[5][5].. (종이에 board 하나 그리고 보니, 보다 쉽게 인덱스들 파악 가능)

		board[][]~board[][]

		사람의 풀이 과정
        단계1) 3*3칸 내부에서 1~9 중 없는 숫자 파악(missInSmallBox) + 비어있는 자리 위치 파악
        단계2) 비어있는 자리의 행/열별 1~9 중 없는 숫자 파악 -> missInRow, missInColumn
        단계3) 단계1에서 구한 없는 숫자 배열/리스트를 원소 하나(missInSmallBox[i])씩 순회하면서
        missInRow[j]에 그 원소가 있/없는지 확인 -> 없으면 missInRow[j+1]로 넘어가 순회 계속 vs 있으면 해당 컬럼 k 관련 missInColumn[k]에 그 원소가 있/없는지 확인 -> 없으면 missInSmallBox[i]가 들어갈 수 있는 위치 후보로써 board[j][k] 저장/기록해둠
        현재 missInSmallBox[i]의 위치 후보에 2 이상의 값이 들어있다면, missInSmallBox[i+1]로 넘어가 순회 계속 vs 위치 후보에 1개 값만 들어있다면 해당 위치에 missInSmallBox[i]을 위치시키고, 해당 board 자리는 비어있지 않음/채워짐으로 정보 수정

        idea draft
        단계2) 없는 숫자별(missings[i])로 위치할 수 있는 경우의 수를 따져봄
        단계2a) 비어있는 칸이 있는 row별 해당 숫자(missings[i])가..
		*/
        // 사람의 풀이 과정
        // 단계1) 3*3칸 내부에서 1~9 중 없는 숫자 파악(missInSmallBox) + 비어있는 자리 위치 파악
        int level = 0;
        for (int i = 0; i < i + 3; i =+ 3) { // 3*3칸의 row별 순회
            // 내가 생각하는 로직대로 구현하려면 여기 경우의 수/조건문이 많아질 것 같다..? 괜찮을 것 같기도 하니까, 일단 코딩해보자
//            int j = 0 + level * 3;

            for (int j = 0; j < 3; j++) {

            }

        }

        // 단계2) 비어있는 자리의 행/열별 1~9 중 없는 숫자 파악 -> missInRow, missInColumn
        // 단계3) 단계1에서 구한 없는 숫자 배열/리스트를 원소 하나(missInSmallBox[i])씩 순회하면서
        // missInRow[j]에 그 원소가 있/없는지 확인 -> 없으면 missInRow[j+1]로 넘어가 순회 계속 vs 있으면 해당 컬럼 k 관련 missInColumn[k]에 그 원소가 있/없는지 확인 -> 없으면 missInSmallBox[i]가 들어갈 수 있는 위치 후보로써 board[j][k] 저장/기록해둠
        // 현재 missInSmallBox[i]의 위치 후보에 2 이상의 값이 들어있다면, missInSmallBox[i+1]로 넘어가 순회 계속 vs 위치 후보에 1개 값만 들어있다면 해당 위치에 missInSmallBox[i]을 위치시키고, 해당 board 자리는 비어있지 않음/채워짐으로 정보 수정
        return board;
    }

    // findMissInXXX() 함수 별도로 만들어서 사용

    public static void main(String[] args) {
        //테스트케이스
        //1 = expected:   [[4, 3, 5, 2, 6, 9, 7, 8, 1],      [6, 8, 2, 5, 7, 1, 4, 9, 3],      [1, 9, 7, 8, 3, 4, 5, 6, 2],      [8, 2, 6, 1, 9, 5, 3, 4, 7],      [3, 7, 4, 6, 8, 2, 9, 1, 5],      [9, 5, 1, 7, 4, 3, 6, 2, 8],      [5, 1, 9, 3, 2, 6, 8, 7, 4],      [2, 4, 8, 9, 5, 7, 1, 3, 6],      [7, 6, 3, 4, 1, 8, 2, 5, 9]] but was:   [[0, 3, 0, 2, 6, 0, 7, 0, 1],      [6, 8, 0, 0, 7, 0, 0, 9, 0],      [1, 9, 0, 0, 0, 4, 5, 0, 0],      [8, 2, 0, 1, 0, 0, 0, 4, 0],      [0, 0, 4, 6, 0, 2, 9, 0, 0],      [0, 5, 0, 0, 0, 3, 0, 2, 8],      [0, 0, 9, 3, 0, 0, 0, 7, 4],      [0, 4, 0, 0, 5, 0, 0, 3, 6],      [7, 0, 3, 0, 1, 8, 0, 0, 0]]
        //2 = expected:   [[1, 4, 2, 5, 9, 6, 3, 7, 8],      [3, 7, 6, 8, 1, 4, 5, 9, 2],      [5, 8, 9, 3, 7, 2, 4, 1, 6],      [6, 5, 1, 4, 8, 9, 7, 2, 3],      [7, 3, 4, 2, 5, 1, 8, 6, 9],      [2, 9, 8, 7, 6, 3, 1, 5, 4],      [9, 1, 3, 6, 4, 7, 2, 8, 5],      [8, 2, 7, 9, 3, 5, 6, 4, 1],      [4, 6, 5, 1, 2, 8, 9, 3, 7]] but was:   [[0, 0, 0, 0, 0, 0, 0, 7, 0],      [0, 7, 0, 0, 1, 0, 5, 9, 0],      [0, 8, 0, 3, 0, 2, 0, 1, 6],      [6, 5, 0, 4, 0, 9, 0, 0, 3],      [0, 0, 4, 0, 0, 0, 0, 0, 0],      [0, 0, 0, 7, 6, 0, 0, 0, 0],      [9, 1, 0, 6, 0, 0, 0, 0, 0],      [0, 2, 7, 9, 0, 0, 0, 4, 0],      [4, 0, 5, 1, 0, 0, 0, 0, 0]]
        //3 = expected:   [[1, 5, 2, 4, 8, 9, 3, 7, 6],      [7, 3, 9, 2, 5, 6, 8, 4, 1],      [4, 6, 8, 3, 7, 1, 2, 9, 5],      [3, 8, 7, 1, 2, 4, 6, 5, 9],      [5, 9, 1, 7, 6, 3, 4, 2, 8],      [2, 4, 6, 8, 9, 5, 7, 1, 3],      [9, 1, 4, 6, 3, 7, 5, 8, 2],      [6, 2, 5, 9, 4, 8, 1, 3, 7],      [8, 7, 3, 5, 1, 2, 9, 6, 4]] but was:   [[1, 0, 0, 4, 8, 9, 0, 0, 6],      [7, 3, 0, 0, 5, 0, 0, 4, 0],      [4, 0, 0, 0, 0, 1, 2, 9, 5],      [0, 0, 7, 1, 2, 0, 6, 0, 0],      [5, 0, 0, 7, 0, 3, 0, 0, 8],      [0, 0, 6, 0, 9, 5, 7, 0, 0],      [9, 1, 4, 6, 0, 0, 0, 0, 0],      [0, 2, 0, 0, 0, 0, 0, 3, 7],      [8, 0, 0, 5, 1, 2, 0, 0, 4]]
        //4 = expected:   [[6, 8, 4, 1, 5, 9, 7, 3, 2],      [7, 5, 1, 8, 3, 2, 9, 4, 6],      [9, 2, 3, 6, 7, 4, 1, 8, 5],      [1, 9, 2, 3, 6, 5, 8, 7, 4],      [8, 4, 5, 2, 1, 7, 6, 9, 3],      [3, 6, 7, 4, 9, 8, 2, 5, 1],      [2, 3, 9, 7, 4, 6, 5, 1, 8],      [5, 1, 6, 9, 8, 3, 4, 2, 7],      [4, 7, 8, 5, 2, 1, 3, 6, 9]] but was:   [[0, 0, 0, 0, 0, 0, 0, 0, 2],      [0, 0, 0, 0, 0, 0, 9, 4, 0],      [0, 0, 3, 0, 0, 0, 0, 0, 5],      [0, 9, 2, 3, 0, 5, 0, 7, 4],      [8, 4, 0, 0, 0, 0, 0, 0, 0],      [0, 6, 7, 0, 9, 8, 0, 0, 0],      [0, 0, 0, 7, 0, 6, 0, 0, 0],      [0, 0, 0, 9, 0, 0, 0, 2, 0],      [4, 0, 8, 5, 0, 0, 3, 6, 0]]
        //5 = expected:   [[6, 4, 7, 5, 3, 8, 1, 9, 2],      [9, 5, 3, 2, 6, 1, 4, 7, 8],      [2, 8, 1, 4, 9, 7, 6, 5, 3],      [8, 6, 5, 7, 2, 9, 3, 1, 4],      [3, 9, 4, 1, 8, 5, 2, 6, 7],      [7, 1, 2, 6, 4, 3, 9, 8, 5],      [1, 2, 8, 9, 7, 4, 5, 3, 6],      [5, 7, 6, 3, 1, 2, 8, 4, 9],      [4, 3, 9, 8, 5, 6, 7, 2, 1]] but was:   [[0, 0, 0, 0, 0, 8, 0, 9, 0],      [0, 0, 3, 0, 0, 1, 0, 0, 0],      [2, 0, 0, 0, 0, 7, 6, 0, 0],      [0, 0, 0, 0, 2, 0, 0, 0, 0],      [0, 9, 4, 0, 8, 0, 2, 0, 0],      [7, 1, 0, 0, 4, 0, 9, 0, 5],      [1, 0, 0, 9, 0, 0, 5, 3, 0],      [5, 7, 0, 0, 0, 0, 8, 4, 0],      [0, 0, 0, 0, 0, 6, 0, 2, 1]]
        //6 = expected:   [[9, 5, 4, 3, 7, 1, 8, 6, 2],      [6, 3, 7, 8, 9, 2, 1, 5, 4],      [1, 2, 8, 5, 6, 4, 9, 3, 7],      [8, 4, 9, 6, 2, 3, 5, 7, 1],      [5, 6, 1, 7, 8, 9, 2, 4, 3],      [3, 7, 2, 1, 4, 5, 6, 9, 8],      [2, 9, 6, 4, 3, 8, 7, 1, 5],      [7, 1, 3, 2, 5, 6, 4, 8, 9],      [4, 8, 5, 9, 1, 7, 3, 2, 6]] but was:   [[9, 5, 0, 0, 0, 1, 0, 0, 2],      [6, 3, 0, 0, 0, 0, 1, 0, 0],      [0, 0, 8, 0, 6, 0, 0, 0, 7],      [0, 0, 0, 0, 0, 0, 5, 0, 0],      [0, 6, 1, 7, 0, 9, 0, 0, 0],      [0, 0, 2, 0, 4, 0, 0, 0, 8],      [0, 9, 0, 0, 0, 0, 0, 0, 5],      [0, 1, 0, 0, 5, 6, 4, 8, 0],      [0, 8, 0, 0, 1, 7, 0, 0, 6]]
        //7 = expected:   [[5, 2, 1, 7, 6, 4, 8, 9, 3],      [3, 4, 8, 9, 1, 5, 2, 6, 7],      [9, 7, 6, 3, 2, 8, 1, 4, 5],      [8, 5, 7, 4, 9, 6, 3, 1, 2],      [6, 3, 2, 1, 8, 7, 9, 5, 4],      [1, 9, 4, 5, 3, 2, 6, 7, 8],      [4, 8, 9, 2, 7, 1, 5, 3, 6],      [7, 6, 3, 8, 5, 9, 4, 2, 1],      [2, 1, 5, 6, 4, 3, 7, 8, 9]] but was:   [[0, 2, 0, 7, 6, 0, 0, 0, 3],      [0, 0, 0, 0, 0, 0, 2, 0, 0],      [9, 0, 6, 0, 2, 0, 0, 4, 0],      [8, 0, 0, 4, 0, 0, 0, 1, 0],      [0, 0, 0, 1, 0, 0, 0, 0, 0],      [1, 9, 0, 5, 3, 0, 6, 0, 8],      [4, 8, 9, 0, 0, 1, 0, 3, 6],      [0, 0, 0, 0, 5, 9, 0, 0, 0],      [2, 1, 0, 0, 0, 0, 0, 8, 9]]
    }
}

// 8h45 그런데 나는 못 풀 것 같긴 한데, 어느 정도까지 하고 레퍼런스를 봐야 할까? >.<
